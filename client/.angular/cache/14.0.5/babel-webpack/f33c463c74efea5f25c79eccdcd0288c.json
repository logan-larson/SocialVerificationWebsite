{"ast":null,"code":"import _asyncToGenerator from \"/home/ubuntu/SocialVerificationWebsite/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*\nThis service manages the current interaction being built.\n*/\nimport { EventEmitter } from '@angular/core';\nimport { Group } from '../models/group';\nimport { Interaction } from '../models/interaction';\nimport { Position } from '../models/position';\nimport { MicroInteraction } from '../models/microInteraction';\nimport { getTrackedMicroTypes } from '../models/trackedMicroTypes';\nimport { Transition } from '../models/transition';\nimport * as i0 from \"@angular/core\";\nexport class InteractionManagerService {\n  constructor() {\n    this.interaction = new Interaction();\n    this.isAddingGroup = false;\n    this.addingTransition = 0;\n    this.currentMicroType = '';\n    this.updateBtnState = new EventEmitter();\n    this.getUpdatedInteraction = new EventEmitter();\n    this.canvasOffset = new Position(0, 0);\n    this.canvasScrollOffset = new Position(0, 0);\n    this.currentTransition = new Transition(-1, -1, -1);\n  }\n  /* Group related CRUD functions */\n\n\n  addGroup(x, y) {\n    let isInitial = this.interaction.groupIdCounter == 0 ? true : false;\n    let name = 'untitled' + this.interaction.groupIdCounter;\n    let g = new Group(isInitial, this.interaction.groupIdCounter, name, x + this.canvasScrollOffset.x, y + this.canvasScrollOffset.y);\n    this.interaction.groupIdCounter++;\n    this.interaction.groups.push(g);\n    this.getUpdatedInteraction.emit(this.interaction);\n    return g;\n  }\n\n  getGroupById(id) {\n    let g = this.interaction.groups.find(x => x.id === id);\n\n    if (g) {\n      return g;\n    }\n\n    return undefined;\n  }\n\n  updateGroup(group) {\n    let gs = this.interaction.groups.filter(x => x.id != group.id);\n    gs.push(group);\n    this.interaction.groups = gs;\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n\n  removeGroup(groupId) {\n    // Remove transitions associated with the groupId\n    let ts = this.interaction.transitions.filter(x => x.firstGroupId != groupId && x.secondGroupId != groupId);\n    this.interaction.transitions = ts; // Remove the group from the groups list\n\n    let gs = this.interaction.groups.filter(x => x.id != groupId);\n    this.interaction.groups = gs;\n\n    if (this.interaction.groups.length == 0) {\n      this.interaction.groupIdCounter = 0;\n    }\n\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n  /* Micro related CRUD functions */\n\n\n  addMicroToGroup(groupId) {\n    let trackedMicroTypes = getTrackedMicroTypes();\n    const g = this.interaction.getGroup(groupId);\n\n    if (!g) {\n      console.log(\"ERROR: add micro to group failure with groupId: %d\", groupId);\n      return null;\n    }\n\n    let params = [];\n    let mt = trackedMicroTypes.find(m => m.type === this.currentMicroType);\n\n    if (mt) {\n      params = mt.parameters;\n    }\n\n    let m = new MicroInteraction(g.microIdCounter++, g.id, this.currentMicroType, params);\n    g.micros.push(m);\n    this.getUpdatedInteraction.emit(this.interaction);\n    return m;\n  }\n\n  removeMicro(groupId, microId) {\n    const g = this.interaction.getGroup(groupId);\n\n    if (!g) {\n      console.log(\"ERROR: remove micro failure with groupId: %d\", groupId);\n      return;\n    }\n\n    g.removeMicro(microId);\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n  /* Parameter related CRUD functions */\n\n\n  updateParams(groupId, microId, paramRes) {\n    let g = this.interaction.groups.find(group => group.id === groupId);\n\n    if (g) {\n      let m = g.micros.find(micro => micro.id === microId);\n\n      if (m) {\n        m.updateResults(paramRes);\n        this.getUpdatedInteraction.emit(this.interaction);\n      }\n    }\n  }\n  /* Transition related CRUD functions */\n\n\n  removeTransition(tid) {\n    let ts = this.interaction.transitions.filter(x => x.id != tid);\n    this.interaction.transitions = ts;\n\n    if (this.interaction.transitions.length == 0) {\n      this.interaction.transitionIdCounter = 0;\n    }\n\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n\n  setGroup1Id(gid) {\n    this.currentTransition = new Transition();\n    this.currentTransition.firstGroupId = gid;\n    this.addingTransition++;\n  }\n\n  setGroup2Id(gid) {\n    // Check that this is going to be a unique transition\n    let dup = this.interaction.transitions.find(t => t.firstGroupId == this.currentTransition.firstGroupId && t.secondGroupId == gid);\n\n    if (dup != undefined) {\n      return;\n    }\n\n    this.currentTransition.secondGroupId = gid;\n    this.currentTransition.id = this.interaction.transitionIdCounter;\n    this.interaction.transitionIdCounter++;\n    this.interaction.transitions.push(this.currentTransition);\n    this.getUpdatedInteraction.emit(this.interaction);\n    this.setAddingTransition(0);\n  }\n\n  updateTransition(transition) {\n    let ts = this.interaction.transitions.filter(x => x.id != transition.id);\n    ts.push(transition);\n    this.interaction.transitions = ts;\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n  /* State management for view reflection */\n\n\n  setAddingGroup(val) {\n    this.isAddingGroup = val;\n    this.addingTransition = 0;\n    this.updateBtnState.emit();\n  }\n\n  setAddingTransition(val) {\n    this.addingTransition = val;\n    this.isAddingGroup = false;\n    this.updateBtnState.emit();\n  }\n  /* Loading from file on disk */\n\n\n  loadInteractionFromJSONFile(file) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let t = yield file.text();\n      _this.interaction = new Interaction(t);\n\n      _this.getUpdatedInteraction.emit(_this.interaction);\n    })();\n  }\n  /* Save and load interaction from local storage */\n\n\n  loadInteractionFromLocal() {\n    let interactionString = localStorage.getItem('interaction');\n\n    if (interactionString) {\n      this.interaction = new Interaction(interactionString);\n    } else {\n      this.interaction = new Interaction();\n    }\n\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n\n  saveInteractionToLocal() {\n    localStorage.setItem('interaction', JSON.stringify(this.interaction));\n  }\n  /* New interaction */\n\n\n  clearCanvas() {\n    this.interaction = new Interaction();\n    this.getUpdatedInteraction.emit(this.interaction);\n    this.saveInteractionToLocal();\n  }\n\n}\n\nInteractionManagerService.ɵfac = function InteractionManagerService_Factory(t) {\n  return new (t || InteractionManagerService)();\n};\n\nInteractionManagerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InteractionManagerService,\n  factory: InteractionManagerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","Group","Interaction","Position","MicroInteraction","getTrackedMicroTypes","Transition","InteractionManagerService","constructor","currentTransition","addGroup","x","y","isInitial","interaction","groupIdCounter","name","g","canvasScrollOffset","groups","push","getUpdatedInteraction","emit","getGroupById","id","find","undefined","updateGroup","group","gs","filter","removeGroup","groupId","ts","transitions","firstGroupId","secondGroupId","length","addMicroToGroup","trackedMicroTypes","getGroup","console","log","params","mt","m","type","currentMicroType","parameters","microIdCounter","micros","removeMicro","microId","updateParams","paramRes","micro","updateResults","removeTransition","tid","transitionIdCounter","setGroup1Id","gid","addingTransition","setGroup2Id","dup","t","setAddingTransition","updateTransition","transition","setAddingGroup","val","isAddingGroup","updateBtnState","loadInteractionFromJSONFile","file","text","loadInteractionFromLocal","interactionString","localStorage","getItem","saveInteractionToLocal","setItem","JSON","stringify","clearCanvas","factory","providedIn"],"sourceRoot":"","sources":["/home/ubuntu/SocialVerificationWebsite/client/src/app/services/interaction-manager.service.ts"],"sourcesContent":["/*\nThis service manages the current interaction being built.\n*/\n\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { Group } from '../models/group';\nimport { Interaction } from '../models/interaction';\nimport { Position } from '../models/position';\nimport { MicroInteraction } from '../models/microInteraction';\nimport { Parameter } from '../models/parameter';\nimport { MicroType } from '../models/microType';\nimport { ParameterResult } from '../models/parameterResult';\nimport { getTrackedMicroTypes } from '../models/trackedMicroTypes';\nimport { Transition } from '../models/transition';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InteractionManagerService {\n\n  interaction: Interaction = new Interaction();\n\n  isAddingGroup: boolean = false;\n  addingTransition: number = 0;\n  currentTransition: Transition;\n\n  currentMicroType: string = '';\n\n  @Output() updateBtnState: EventEmitter<any> = new EventEmitter();\n  @Output() getUpdatedInteraction: EventEmitter<Interaction> = new EventEmitter<Interaction>();\n\n  canvasOffset: Position = new Position(0, 0);\n  canvasScrollOffset: Position = new Position(0, 0);\n\n  constructor() {\n    this.currentTransition = new Transition(-1, -1, -1);\n  }\n\n  /* Group related CRUD functions */\n\n  addGroup(x: number, y: number): Group {\n\n    let isInitial: boolean = this.interaction.groupIdCounter == 0 ? true : false;\n    let name: string = 'untitled' + this.interaction.groupIdCounter;\n\n    let g = new Group(isInitial, this.interaction.groupIdCounter, name, x + this.canvasScrollOffset.x, y + this.canvasScrollOffset.y);\n\n    this.interaction.groupIdCounter++;\n\n    this.interaction.groups.push(g);\n\n    this.getUpdatedInteraction.emit(this.interaction);\n\n    return g;\n  }\n\n  getGroupById(id: number): Group | undefined {\n    let g: Group | undefined = this.interaction.groups.find((x: Group) => x.id === id);\n\n    if (g) {\n      return g;\n    }\n    return undefined;\n  }\n\n  updateGroup(group: Group) {\n    let gs: Group[] = this.interaction.groups.filter((x: Group) => x.id != group.id);\n\n    gs.push(group);\n\n    this.interaction.groups = gs;\n\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n\n  removeGroup(groupId: number):void {\n    // Remove transitions associated with the groupId\n    let ts: Transition[] = this.interaction.transitions.filter((x: Transition) => x.firstGroupId != groupId && x.secondGroupId != groupId);\n\n    this.interaction.transitions = ts;\n\n    // Remove the group from the groups list\n    let gs: Group[] = this.interaction.groups.filter((x: Group) => x.id != groupId);\n\n    this.interaction.groups = gs;\n\n    if (this.interaction.groups.length == 0) {\n      this.interaction.groupIdCounter = 0;\n    }\n\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n  \n  /* Micro related CRUD functions */\n\n  addMicroToGroup(groupId: number): MicroInteraction  | null {\n\n    let trackedMicroTypes: MicroType[] = getTrackedMicroTypes();\n\n    const g: Group | undefined = this.interaction.getGroup(groupId);\n    \n    if (!g) {\n      console.log(\"ERROR: add micro to group failure with groupId: %d\", groupId);\n      return null;\n    }\n\n    let params: Parameter[] = [];\n\n    let mt: MicroType | undefined = trackedMicroTypes.find((m: MicroType) => m.type === this.currentMicroType);\n\n    if (mt) {\n      params = mt.parameters;\n    }\n\n    let m: MicroInteraction = new MicroInteraction(g.microIdCounter++, g.id, this.currentMicroType, params);\n\n    g.micros.push(m);\n\n    this.getUpdatedInteraction.emit(this.interaction);\n    \n    return m;\n  }\n\n  removeMicro(groupId: number, microId: number):void {\n    const g: Group | undefined = this.interaction.getGroup(groupId);\n    \n    if (!g) {\n      console.log(\"ERROR: remove micro failure with groupId: %d\", groupId);\n      return;\n    }\n\n    g.removeMicro(microId);\n\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n\n  /* Parameter related CRUD functions */\n  \n  updateParams(groupId: number, microId: number, paramRes: ParameterResult[]) {\n    let g = this.interaction.groups.find(group => group.id === groupId);\n\n    if (g) {\n      let m = g.micros.find(micro => micro.id === microId);\n      if (m) {\n        m.updateResults(paramRes);\n\n        this.getUpdatedInteraction.emit(this.interaction);\n      }\n    }\n  }\n\n  /* Transition related CRUD functions */\n\n  removeTransition(tid: number) {\n    let ts: Transition[] = this.interaction.transitions.filter((x: Transition) => x.id != tid);\n\n    this.interaction.transitions = ts;\n\n    if (this.interaction.transitions.length == 0) {\n      this.interaction.transitionIdCounter = 0;\n    }\n\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n\n  setGroup1Id(gid: number) {\n    this.currentTransition = new Transition();\n    this.currentTransition.firstGroupId = gid;\n    this.addingTransition++;\n  }\n\n  setGroup2Id(gid: number) {\n\n    // Check that this is going to be a unique transition\n    let dup = this.interaction.transitions.find((t: Transition) => t.firstGroupId == this.currentTransition.firstGroupId && t.secondGroupId == gid);\n\n    if (dup != undefined) {\n      return;\n    }\n\n    this.currentTransition.secondGroupId = gid;\n\n    this.currentTransition.id = this.interaction.transitionIdCounter;\n    this.interaction.transitionIdCounter++;\n\n    this.interaction.transitions.push(this.currentTransition);\n\n    this.getUpdatedInteraction.emit(this.interaction);\n\n    this.setAddingTransition(0);\n  }\n\n  updateTransition(transition: Transition) {\n    let ts: Transition[] = this.interaction.transitions.filter((x: Transition) => x.id != transition.id);\n\n    ts.push(transition);\n\n    this.interaction.transitions = ts;\n\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n\n  /* State management for view reflection */\n\n  setAddingGroup(val: boolean) {\n    this.isAddingGroup = val;\n    this.addingTransition = 0;\n\n    this.updateBtnState.emit();\n  }\n\n  setAddingTransition(val: number) {\n    this.addingTransition = val;\n    this.isAddingGroup = false;\n\n    this.updateBtnState.emit();\n  }\n\n  /* Loading from file on disk */\n\n  async loadInteractionFromJSONFile(file: File) {\n    let t: string = await file.text();\n\n    this.interaction = new Interaction(t);\n\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n\n  /* Save and load interaction from local storage */\n\n  loadInteractionFromLocal(): void {\n    let interactionString = localStorage.getItem('interaction');\n\n    if (interactionString) {\n      this.interaction = new Interaction(interactionString);\n    } else {\n      this.interaction = new Interaction();\n    }\n\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n\n  saveInteractionToLocal() {\n    localStorage.setItem('interaction', JSON.stringify(this.interaction));\n  }\n\n  /* New interaction */\n\n  clearCanvas() {\n    this.interaction = new Interaction();\n\n    this.getUpdatedInteraction.emit(this.interaction);\n\n    this.saveInteractionToLocal();\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}