{"ast":null,"code":"import _asyncToGenerator from \"/home/ubuntu/SocialVerificationWebsite/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport { Group } from '../models/group';\nimport { Interaction } from '../models/interaction';\nimport { Position } from '../models/position';\nimport { MicroInteraction } from '../models/microInteraction';\nimport * as i0 from \"@angular/core\";\nexport class CanvasManagerService {\n  constructor() {\n    this.interaction = new Interaction();\n    this.isAddingGroup = false;\n    this.addingTransition = 0;\n    this.currentMicroType = '';\n    this.updateBtnState = new EventEmitter();\n    this.getUpdatedInteraction = new EventEmitter();\n    this.canvasOffset = new Position(0, 0);\n    this.canvasScrollOffset = new Position(0, 0);\n  }\n  /* Group related CRUD functions */\n\n\n  addGroup(x, y) {\n    let isInitial = this.interaction.groupIdCounter == 0 ? true : false;\n    let name = 'untitled' + this.interaction.groupIdCounter;\n    let g = new Group(isInitial, this.interaction.groupIdCounter, name, x + this.canvasScrollOffset.x, y + this.canvasScrollOffset.y);\n    this.interaction.groupIdCounter++;\n    this.interaction.groups.push(g);\n    this.getUpdatedInteraction.emit(this.interaction);\n    return g;\n  }\n\n  getGroupById(id) {\n    let g = this.interaction.groups.find(x => x.id === id);\n\n    if (g) {\n      return g;\n    }\n\n    return undefined;\n  }\n\n  updateGroup(group) {\n    let gs = this.interaction.groups.filter(x => x.id != group.id);\n    gs.push(group);\n    this.interaction.groups = gs;\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n\n  removeGroup(groupId) {\n    this.interaction.removeGroup(groupId);\n\n    if (this.interaction.groups.length == 0) {\n      this.interaction.groupIdCounter = 0;\n    }\n\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n  /* Micro related CRUD functions */\n\n\n  addMicroToGroup(groupId) {\n    const g = this.interaction.getGroup(groupId);\n\n    if (!g) {\n      console.log(\"ERROR: add micro to group failure with groupId: %d\", groupId);\n      return null;\n    }\n\n    let params = [];\n    let mt = this.interaction.trackedMicroTypes.find(m => m.type === this.currentMicroType);\n\n    if (mt) {\n      params = mt.parameters;\n    }\n\n    let m = new MicroInteraction(g.microIdCounter++, g.id, this.currentMicroType, params);\n    g.micros.push(m);\n    this.getUpdatedInteraction.emit(this.interaction);\n    return m;\n  }\n\n  removeMicro(groupId, microId) {\n    const g = this.interaction.getGroup(groupId);\n\n    if (!g) {\n      console.log(\"ERROR: remove micro failure with groupId: %d\", groupId);\n      return;\n    }\n\n    g.removeMicro(microId);\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n  /* Parameter related CRUD functions */\n\n\n  updateParams(groupId, microId, paramRes) {}\n  /* State management for view reflection */\n\n\n  setAddingGroup(val) {\n    this.isAddingGroup = val;\n    this.addingTransition = 0;\n    this.updateBtnState.emit();\n  }\n\n  setAddingTransition(val) {\n    this.addingTransition = val;\n    this.isAddingGroup = false;\n    this.updateBtnState.emit();\n  }\n  /* Loading from file on disk */\n\n\n  loadInteractionFromXMLFile(file) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let t = yield file.text();\n      _this.interaction = new Interaction(t);\n\n      _this.getUpdatedInteraction.emit(_this.interaction);\n    })();\n  }\n  /* Save and load interaction from local storage */\n\n\n  loadInteractionFromLocal() {\n    let xmlString = localStorage.getItem('interactionXML');\n    this.interaction = new Interaction(xmlString);\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n\n  saveInteractionToLocal() {\n    let xmlString = this.interaction.exportModelToXML();\n    localStorage.setItem('interactionXML', xmlString);\n  }\n  /* New interaction */\n\n\n  clearCanvas() {\n    this.interaction = new Interaction(null);\n    this.getUpdatedInteraction.emit(this.interaction);\n    this.saveInteractionToLocal();\n  }\n\n}\n\nCanvasManagerService.ɵfac = function CanvasManagerService_Factory(t) {\n  return new (t || CanvasManagerService)();\n};\n\nCanvasManagerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CanvasManagerService,\n  factory: CanvasManagerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","Group","Interaction","Position","MicroInteraction","CanvasManagerService","constructor","addGroup","x","y","isInitial","interaction","groupIdCounter","name","g","canvasScrollOffset","groups","push","getUpdatedInteraction","emit","getGroupById","id","find","undefined","updateGroup","group","gs","filter","removeGroup","groupId","length","addMicroToGroup","getGroup","console","log","params","mt","trackedMicroTypes","m","type","currentMicroType","parameters","microIdCounter","micros","removeMicro","microId","updateParams","paramRes","setAddingGroup","val","isAddingGroup","addingTransition","updateBtnState","setAddingTransition","loadInteractionFromXMLFile","file","t","text","loadInteractionFromLocal","xmlString","localStorage","getItem","saveInteractionToLocal","exportModelToXML","setItem","clearCanvas","factory","providedIn"],"sourceRoot":"","sources":["/home/ubuntu/SocialVerificationWebsite/client/src/app/services/canvas-manager.service.ts"],"sourcesContent":["import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { Group } from '../models/group';\nimport { Interaction } from '../models/interaction';\nimport { Position } from '../models/position';\nimport { MicroInteraction } from '../models/microInteraction';\nimport {Parameter} from '../models/parameter';\nimport {MicroType} from '../models/microType';\nimport {ParameterResult} from '../models/parameterResult';\nimport { getTrackedMicroTypes } from '../models/trackedMicroTypes';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CanvasManagerService {\n\n  interaction: Interaction = new Interaction();\n\n  isAddingGroup: boolean = false;\n  addingTransition: number = 0;\n  currentMicroType: string = '';\n\n  @Output() updateBtnState: EventEmitter<any> = new EventEmitter();\n  @Output() getUpdatedInteraction: EventEmitter<Interaction> = new EventEmitter<Interaction>();\n\n  canvasOffset: Position = new Position(0, 0);\n  canvasScrollOffset: Position = new Position(0, 0);\n\n  constructor() {}\n\n  /* Group related CRUD functions */\n\n  addGroup(x: number, y: number): Group {\n\n    let isInitial: boolean = this.interaction.groupIdCounter == 0 ? true : false;\n    let name: string = 'untitled' + this.interaction.groupIdCounter;\n\n    let g = new Group(isInitial, this.interaction.groupIdCounter, name, x + this.canvasScrollOffset.x, y + this.canvasScrollOffset.y);\n\n    this.interaction.groupIdCounter++;\n\n    this.interaction.groups.push(g);\n\n    this.getUpdatedInteraction.emit(this.interaction);\n\n    return g;\n  }\n\n  getGroupById(id: number): Group | undefined {\n    let g: Group | undefined = this.interaction.groups.find((x: Group) => x.id === id);\n\n    if (g) {\n      return g;\n    }\n    return undefined;\n  }\n\n  updateGroup(group: Group) {\n    let gs: Group[] = this.interaction.groups.filter((x: Group) => x.id != group.id);\n\n    gs.push(group);\n\n    this.interaction.groups = gs;\n\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n\n  removeGroup(groupId: number):void {\n    this.interaction.removeGroup(groupId);\n\n    if (this.interaction.groups.length == 0) {\n      this.interaction.groupIdCounter = 0;\n    }\n\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n  \n  /* Micro related CRUD functions */\n\n  addMicroToGroup(groupId: number): MicroInteraction  | null {\n\n    const g: Group | undefined = this.interaction.getGroup(groupId);\n    \n    if (!g) {\n      console.log(\"ERROR: add micro to group failure with groupId: %d\", groupId);\n      return null;\n    }\n\n    let params: Parameter[] = [];\n    let mt: MicroType | undefined = this.interaction.trackedMicroTypes.find((m: MicroType) => m.type === this.currentMicroType);\n\n    if (mt) {\n      params = mt.parameters;\n    }\n\n    let m: MicroInteraction = new MicroInteraction(g.microIdCounter++, g.id, this.currentMicroType, params);\n\n    g.micros.push(m);\n\n    this.getUpdatedInteraction.emit(this.interaction);\n    \n    return m;\n  }\n\n  removeMicro(groupId: number, microId: number):void {\n    const g: Group | undefined = this.interaction.getGroup(groupId);\n    \n    if (!g) {\n      console.log(\"ERROR: remove micro failure with groupId: %d\", groupId);\n      return;\n    }\n\n    g.removeMicro(microId);\n\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n\n  /* Parameter related CRUD functions */\n  \n  updateParams(groupId: number, microId: number, paramRes: ParameterResult<any>[]) {\n\n  }\n\n\n  /* State management for view reflection */\n\n  setAddingGroup(val: boolean) {\n    this.isAddingGroup = val;\n    this.addingTransition = 0;\n\n    this.updateBtnState.emit();\n  }\n\n  setAddingTransition(val: number) {\n    this.addingTransition = val;\n    this.isAddingGroup = false;\n\n    this.updateBtnState.emit();\n  }\n\n  /* Loading from file on disk */\n\n  async loadInteractionFromXMLFile(file: File) {\n    let t: string = await file.text();\n\n    this.interaction = new Interaction(t);\n\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n\n  /* Save and load interaction from local storage */\n\n  loadInteractionFromLocal(): void {\n    let xmlString = localStorage.getItem('interactionXML');\n\n    this.interaction = new Interaction(xmlString);\n\n    this.getUpdatedInteraction.emit(this.interaction);\n  }\n\n\n  saveInteractionToLocal() {\n    let xmlString = this.interaction.exportModelToXML();\n\n    localStorage.setItem('interactionXML', xmlString);\n  }\n\n  /* New interaction */\n\n  clearCanvas() {\n    this.interaction = new Interaction(null);\n\n    this.getUpdatedInteraction.emit(this.interaction);\n\n    this.saveInteractionToLocal();\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}